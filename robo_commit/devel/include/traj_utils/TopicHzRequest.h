// Generated by gencpp from file traj_utils/TopicHzRequest.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_TOPICHZREQUEST_H
#define TRAJ_UTILS_MESSAGE_TOPICHZREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct TopicHzRequest_
{
  typedef TopicHzRequest_<ContainerAllocator> Type;

  TopicHzRequest_()
    : get(0)  {
    }
  TopicHzRequest_(const ContainerAllocator& _alloc)
    : get(0)  {
  (void)_alloc;
    }



   typedef int64_t _get_type;
  _get_type get;





  typedef boost::shared_ptr< ::traj_utils::TopicHzRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::TopicHzRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TopicHzRequest_

typedef ::traj_utils::TopicHzRequest_<std::allocator<void> > TopicHzRequest;

typedef boost::shared_ptr< ::traj_utils::TopicHzRequest > TopicHzRequestPtr;
typedef boost::shared_ptr< ::traj_utils::TopicHzRequest const> TopicHzRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::TopicHzRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::TopicHzRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::TopicHzRequest_<ContainerAllocator1> & lhs, const ::traj_utils::TopicHzRequest_<ContainerAllocator2> & rhs)
{
  return lhs.get == rhs.get;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::TopicHzRequest_<ContainerAllocator1> & lhs, const ::traj_utils::TopicHzRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::TopicHzRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::TopicHzRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::TopicHzRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a514c24c167567fafb0a99dffb52d0a";
  }

  static const char* value(const ::traj_utils::TopicHzRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a514c24c167567fULL;
  static const uint64_t static_value2 = 0xafb0a99dffb52d0aULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/TopicHzRequest";
  }

  static const char* value(const ::traj_utils::TopicHzRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 get\n"
;
  }

  static const char* value(const ::traj_utils::TopicHzRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.get);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopicHzRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::TopicHzRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::TopicHzRequest_<ContainerAllocator>& v)
  {
    s << indent << "get: ";
    Printer<int64_t>::stream(s, indent + "  ", v.get);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_TOPICHZREQUEST_H
