// Generated by gencpp from file airsim_ros/TriggerPortRequest.msg
// DO NOT EDIT!


#ifndef AIRSIM_ROS_MESSAGE_TRIGGERPORTREQUEST_H
#define AIRSIM_ROS_MESSAGE_TRIGGERPORTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace airsim_ros
{
template <class ContainerAllocator>
struct TriggerPortRequest_
{
  typedef TriggerPortRequest_<ContainerAllocator> Type;

  TriggerPortRequest_()
    : port(0)
    , enter(false)
    , uselessbelow()
    , age(0)
    , height(0.0)
    , weight(0.0)
    , uselessabove()  {
    }
  TriggerPortRequest_(const ContainerAllocator& _alloc)
    : port(0)
    , enter(false)
    , uselessbelow(_alloc)
    , age(0)
    , height(0.0)
    , weight(0.0)
    , uselessabove(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _port_type;
  _port_type port;

   typedef uint8_t _enter_type;
  _enter_type enter;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uselessbelow_type;
  _uselessbelow_type uselessbelow;

   typedef int64_t _age_type;
  _age_type age;

   typedef double _height_type;
  _height_type height;

   typedef double _weight_type;
  _weight_type weight;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uselessabove_type;
  _uselessabove_type uselessabove;





  typedef boost::shared_ptr< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TriggerPortRequest_

typedef ::airsim_ros::TriggerPortRequest_<std::allocator<void> > TriggerPortRequest;

typedef boost::shared_ptr< ::airsim_ros::TriggerPortRequest > TriggerPortRequestPtr;
typedef boost::shared_ptr< ::airsim_ros::TriggerPortRequest const> TriggerPortRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_ros::TriggerPortRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_ros::TriggerPortRequest_<ContainerAllocator1> & lhs, const ::airsim_ros::TriggerPortRequest_<ContainerAllocator2> & rhs)
{
  return lhs.port == rhs.port &&
    lhs.enter == rhs.enter &&
    lhs.uselessbelow == rhs.uselessbelow &&
    lhs.age == rhs.age &&
    lhs.height == rhs.height &&
    lhs.weight == rhs.weight &&
    lhs.uselessabove == rhs.uselessabove;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_ros::TriggerPortRequest_<ContainerAllocator1> & lhs, const ::airsim_ros::TriggerPortRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "563dfac93c3dedab70779f538911a5e5";
  }

  static const char* value(const ::airsim_ros::TriggerPortRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x563dfac93c3dedabULL;
  static const uint64_t static_value2 = 0x70779f538911a5e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_ros/TriggerPortRequest";
  }

  static const char* value(const ::airsim_ros::TriggerPortRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 port\n"
"bool enter\n"
"string uselessbelow\n"
"int64 age\n"
"float64 height\n"
"float64 weight\n"
"string uselessabove\n"
;
  }

  static const char* value(const ::airsim_ros::TriggerPortRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.port);
      stream.next(m.enter);
      stream.next(m.uselessbelow);
      stream.next(m.age);
      stream.next(m.height);
      stream.next(m.weight);
      stream.next(m.uselessabove);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TriggerPortRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_ros::TriggerPortRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_ros::TriggerPortRequest_<ContainerAllocator>& v)
  {
    s << indent << "port: ";
    Printer<int64_t>::stream(s, indent + "  ", v.port);
    s << indent << "enter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enter);
    s << indent << "uselessbelow: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uselessbelow);
    s << indent << "age: ";
    Printer<int64_t>::stream(s, indent + "  ", v.age);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
    s << indent << "uselessabove: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uselessabove);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_ROS_MESSAGE_TRIGGERPORTREQUEST_H
